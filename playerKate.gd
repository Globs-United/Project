extends CharacterBody2D

const SPEED = 300.0
const JUMP_VELOCITY = -500.0
var gravity = ProjectSettings.get_setting("physics/2d/default_gravity")

var jump_check = false
	#prevents flying due to SPACE spam
var playerstate = "idle"
	#idle, walk, jump, death
var death_lock = false
var health = 3
var can_be_hit = true
@export var Yworld = false

#Each object/character has a Yworld variable (aside from walls)
	#use this to denotate if it will first appear in the upside-down world
	#don't worry about the setting Yworld before change_world is called
		#this is b/c change_world changes Yworld

func _process(_delta: float) -> void:
	if Yworld != $AnimatedSprite2D.flip_v:
		Yworld = !Yworld
		change_world()
#I said screw it and ripped code from my previous game jam since it didn't autofill to something like this, like I what occurred last time
#I guess you can figure out how to possibly merge these? The physics works.
func _physics_process(delta: float) -> void:
	
	# Add the gravity.  (+update is_in_air)
	if not is_on_floor():
		velocity += get_gravity() * delta
		#falling?
		if velocity.y < 0:
			playerstate = "jump"
	
	if !death_lock:
		# Handle jump.
		if Input.is_action_just_pressed("jump") and is_on_floor():
			velocity.y = JUMP_VELOCITY
			playerstate = "jump"
			
		#dynamic jump, only letting occur once due to spamming == flying
		if Input.is_action_just_released("jump") and velocity.y < 0:
			if not jump_check:
				velocity.y = JUMP_VELOCITY / 2
			jump_check = true
		
	#This is for walk animation/directionality stuff
	if is_on_floor() and velocity.x < 0:
		$AnimatedSprite2D.flip_h = true
		playerstate = "walk"
	elif is_on_floor() and velocity.x > 0:
		$AnimatedSprite2D.flip_h = false
		playerstate = "walk"
	#this was generated by Godot
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED / 2)
	
	if velocity.x == 0 and velocity.y == 0:
		playerstate = "idle"
	
	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction := Input.get_axis("moveLeft", "moveRight")
	
	if !death_lock:
		if direction:
			velocity.x = direction * SPEED
		else:
			velocity.x = move_toward(velocity.x, 0, SPEED)
	
	playeranim()
	move_and_slide()


func playeranim():
	if Yworld:
		if playerstate == "idle":
			$AnimatedSprite2D.play("idleY")
		elif playerstate == "walk":
			$AnimatedSprite2D.play("walkY")
		elif playerstate == "jump":
			$AnimatedSprite2D.play("jumpY")
		elif playerstate == "death":
			$AnimatedSprite2D.play("deathY")
	else:
		if playerstate == "idle":
			$AnimatedSprite2D.play("idle")
		elif playerstate == "walk":
			$AnimatedSprite2D.play("walk")
		elif playerstate == "jump":
			$AnimatedSprite2D.play("jump")
		elif playerstate == "death":
			$AnimatedSprite2D.play("death")

func change_world():
	Yworld = !Yworld
	$AnimatedSprite2D.flip_v = !($AnimatedSprite2D.flip_v)
	$".".y *= -1
	
func _on_being_hit():
	if can_be_hit:
		health -= 1
		can_be_hit = false
		$iFrames.start()
		if health == 0:
			death_lock = true
			playerstate = "death"


func _on_i_frames_timeout() -> void:
	can_be_hit = true
